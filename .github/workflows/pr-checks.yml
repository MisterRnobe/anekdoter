name: PR Checks

on:
  pull_request:
    branches:
      - master

jobs:
  checks:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: anekdoter
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'
      
      - name: Check code style
        run: mvn ktlint:check
      
      - name: Run tests
        run: mvn test
        
      - name: Generate JaCoCo report
        run: mvn jacoco:prepare-agent test jacoco:report
      
      - name: Check code coverage for new/changed code
        run: |
          # Install necessary tools
          sudo apt-get update
          sudo apt-get install -y bc
          
          # Get list of changed files
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^src/main/kotlin/.*\.kt$' || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No Kotlin source files changed in this PR."
            exit 0
          fi
          
          echo "Changed Kotlin source files:"
          echo "$CHANGED_FILES"
          
          # Check if JaCoCo XML report exists
          if [ ! -f "target/site/jacoco/jacoco.xml" ]; then
            echo "JaCoCo report not found. Ensure tests are running correctly."
            exit 1
          fi
          
          # Check coverage for changed files
          LOW_COVERAGE_FILES=""
          for FILE in $CHANGED_FILES; do
            FILE_PATH=$(echo "$FILE" | sed 's/src\/main\/kotlin\///')
            CLASS_PATH=$(echo "$FILE_PATH" | sed 's/\.kt$//' | sed 's/\//./g')
            
            echo "Checking coverage for class path: $CLASS_PATH"
            
            # Extract coverage from JaCoCo XML report
            COVERAGE_INFO=$(grep -A 20 "name=\"$CLASS_PATH\"" target/site/jacoco/jacoco.xml | grep -o 'line-rate="[0-9.]*"' | head -1 | grep -o '[0-9.]*')
            
            if [ -z "$COVERAGE_INFO" ]; then
              echo "Looking for partial class matches for $CLASS_PATH..."
              # Try to find partial class matches
              COVERAGE_INFO=$(grep -A 20 "name=\".*$(basename "$CLASS_PATH")\"" target/site/jacoco/jacoco.xml | grep -o 'line-rate="[0-9.]*"' | head -1 | grep -o '[0-9.]*')
            fi
            
            if [ -z "$COVERAGE_INFO" ]; then
              echo "WARNING: Could not find coverage data for $CLASS_PATH"
              LOW_COVERAGE_FILES="$LOW_COVERAGE_FILES\n$FILE -> No coverage data found"
            else
              COVERAGE_PCT=$(echo "scale=2; $COVERAGE_INFO * 100" | bc)
              echo "$CLASS_PATH coverage: $COVERAGE_PCT%"
              
              if (( $(echo "$COVERAGE_PCT < 80" | bc -l) )); then
                LOW_COVERAGE_FILES="$LOW_COVERAGE_FILES\n$FILE: $COVERAGE_PCT%"
              fi
            fi
          done
          
          if [ -n "$LOW_COVERAGE_FILES" ]; then
            echo -e "The following files have less than 80% test coverage:$LOW_COVERAGE_FILES"
            echo "Please add more tests to increase coverage."
            exit 1
          else
            echo "All changed files meet the 80% coverage requirement."
          fi

